console.log("Control Panel example v1.0 by Gary Bilkus");

import * as ControlPanel from "../aframe-control-panel.js"; 

// Now we define the control panel

const exampleLayout = {
  name: 'exampleControlPanel',
  maxWidth: 6, // The maximum width of any row measured in standard size keys
  normal: [
    [
      {value: 'T1', width:2,height:1, keyChar: 'T'}, // enabled with a capital T
      {value: '', id:"togglestate1", width:1,height:1, type: 'readonly'}, // used to display feedback
      {value: 'T2', width:2,height:1, keyCode: 65}, // enabled with the 'a' key regardless of the character ( both a and A in english layout )
      {value: '', id:"togglestate2", width:1,height:1, type: 'readonly'}, // feedback
    ],
    [
      {value: 'Big', width:3, height:2 }, // covers several rows and columns - default keystroke is B as this is first character of the value
      {value: '', id:"biginfo", width:3, height:1, type: 'readonly' }, // also for layout
    ],
    [
      {value: '', width:3, type: 'blanking'}, // leave space overridden 
      {value: '1', label:'One'}, // a label overrides what's displayed but not what's sent in an event.
      {value: '2'},
      {value: '3'},
    ],
  ],
};

let exampleControlPanel = new ControlPanel.ControlPanel(exampleLayout);
let bigOn = false; // We use this as a toggle for the Big button
// Now we define the component which intiializes the app - in this case binding the events generated by the keyboard
AFRAME.registerComponent("initializeapp",{
  init: function() {
    // This is where we set up the keyboard bindings 
    document.addEventListener("a-keyboard-update-en-us", (e)=>{
      console.log("Default control panel keyboard layout", e); // so we can see what's happening
      // e.detail is the layout element which was triggered, either by a keyboard event in normal browser mode, or by the raycaster in vr mode
      // So we can interrogate it to find out what has happened and react accordingly
    });
    document.addEventListener("a-keyboard-update-exampleControlPanel", (e)=>{
      console.log("Example Control Panel",e); // so we can see what's happening
      // e.detail is the layout element which was triggered, either by a keyboard event in normal browser mode, or by the raycaster in vr mode
      // So we can interrogate it to find out what has happened and react accordingly
      if (e.detail.value == "Big") {
        let vid = document.querySelector("#biginfo");
        vid.removeAttribute("geometry");
        vid.setAttribute("geometry","primitive","circle");
        vid.setAttribute("geometry","radius","0.01");
        bigOn = !bigOn;
        if ( bigOn) {
          vid.setAttribute("material","shader:flat; color:green;");
        } else {
          vid.setAttribute("material","shader:flat; color:red;");
        }
      }
    });
  }
});

// Here goes the boiler plate to render the scene from scene.html after
// all our modules are initialized
const main = function() {
let whenReady = new Promise(
  (resolve) => document.addEventListener('DOMContentLoaded',resolve)
);

let theScene = null;
let whenScene = new Promise(
  (resolve)=> {
    fetch("./scene.html").then(
      (response)=> {
        if (response.ok) {
	  return response.text();
        } else {
	  console.log("error fetching scene - unable to do much!" , retval);
        }

      }
    ).then(
      (text)=>{
        theScene=text;
        resolve();
      }
    ) ;
  }
);
Promise.all([whenReady,whenScene]).then(
	()=>{
		let app = document.getElementById("app");
		app.innerHTML = theScene;
	});
};

main();
